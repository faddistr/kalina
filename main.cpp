#include "common.h"
#include <stdint.h>
#include <stdio.h>
#include <time.h>
#include <inttypes.h>
#include <conio.h>
#include <math.h>
#include <unistd.h>    /* for getopt */
#include "kalina_tables.h"
#include "kalina_128.h"
#include "kalina_256_256.h"
#include "kalina_512_512.h"

uint8_t key_test_0[16*4] = {0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F,
                            0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F,
                            0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E, 0x2F,
                            0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3A, 0x3B, 0x3C, 0x3D, 0x3E, 0x3F};
uint8_t keyd_test_0[16]= {0x0F,0x0E,0x0D,0x0C,0x0B,0x0A,0x09,0x08,0x07,0x06,0x05,0x04,0x03,0x02,0x01,0x00};

uint64_t roundkey256_256[8*4*15] = {
         0x355bd5df4726daf7, 0xa1cb0fe30852082f, 0x80d70dc8dcc9b369,  0x362e946cc12c071f ,
         0xc9b369a1cb0fe308, 0x2c071f80d70dc8dc, 0x26daf7362e946cc1,  0x52082f355bd5df47 ,
         0xa5ee74fd58111fdf, 0xdb389023c93155c1, 0xcb1f0300919a8326,  0xc2734ff135fd7cb7 ,
         0x9a8326db389023c9, 0xfd7cb7cb1f030091, 0x111fdfc2734ff135,  0x3155c1a5ee74fd58 ,
          0xa6c655c8ae52aca, 0xfca9fb28a6f00bce, 0x5df711fc10e77631,  0x12fd225cf90196eb ,
         0xe77631fca9fb28a6,  0x196eb5df711fc10, 0xe52aca12fd225cf9,  0xf00bce0a6c655c8a ,
         0x4e4010c5ecfc5751, 0x80cbf2f26ce7f544, 0x7dbe10e353ee9bc2,  0x605117eb9aa416f8 ,
         0xee9bc280cbf2f26c, 0xa416f87dbe10e353, 0xfc5751605117eb9a,  0xe7f5444e4010c5ec ,
         0x2a86519b88151c5e, 0xd1b8815787d21da1, 0xb06946aa70a2d00b,  0xeb673447b2497a6b ,
         0xa2d00bd1b8815787, 0x497a6bb06946aa70, 0x151c5eeb673447b2,  0xd21da12a86519b88 ,
         0xaae6a91f5e265237, 0x7bb6c83199a92a08, 0xef4f6f94e7df6408,   0x2db12927cad5b7c ,
         0xdf64087bb6c83199, 0xad5b7cef4f6f94e7, 0x26523702db12927c,  0xa92a08aae6a91f5e ,
         0xbe38887fd643a738, 0xc5e734176c7ed174,  0x6b60644987dc82b,  0x3b8fbaf9171ca779 ,
         0x7dc82bc5e734176c, 0x1ca77906b6064498, 0x43a7383b8fbaf917,  0x7ed174be38887fd6 ,
         0x49cac135a7b169fc, 0xacfcd688bbeb5018, 0x319c105c1616765d,   0x2ea25b8c54431f1
};

const uint64_t roundkey512_512[8*8*19] = {
         0x4cd6c8f2fcc04719, 0x41e2a82d72fb56b2, 0x4f06306102bfea88, 0xc954a84cbdf2e003,   0xcffe4564be48a8, 0xf1434d1c0cde0a51, 0xdf01df63b1533d07,  0xe562f252957e3101 ,
         0xf2e0034f06306102, 0xbe48a8c954a84cbd, 0xde0a5100cffe4564, 0x533d07f1434d1c0c, 0x7e3101df01df63b1, 0xc04719e562f25295, 0xfb56b24cd6c8f2fc,  0xbfea8841e2a82d72 ,
         0x74932a31faf20824, 0x577cbc063c7700a3, 0x79d8e1ec36a169e3, 0xb8f54903a3a2dfc2, 0x5c03ab0117d25c23, 0x33e28d0ff31bbf23, 0x2701f84dc93af8e0,  0x560dda078a4bbe03 ,
         0xa2dfc279d8e1ec36, 0xd25c23b8f54903a3, 0x1bbf235c03ab0117, 0x3af8e033e28d0ff3, 0x4bbe032701f84dc9, 0xf20824560dda078a, 0x7700a374932a31fa,  0xa169e3577cbc063c ,
         0xfd8b7ca96739dfb8, 0xb4ee6851ecec4d5c, 0xd67ad9802d56ee0b, 0x5d4d08cd9c659809, 0xfa7abf00f04134c3, 0xde676df931e4ebee, 0xaab0f8ff5b5ae0a0,  0x23ea917a85c9389a ,
         0x659809d67ad9802d, 0x4134c35d4d08cd9c, 0xe4ebeefa7abf00f0, 0x5ae0a0de676df931, 0xc9389aaab0f8ff5b, 0x39dfb823ea917a85, 0xec4d5cfd8b7ca967,  0x56ee0bb4ee6851ec ,
         0xc35aa0aa7726b67a, 0x8083a01c8694f95b, 0xfc514382fb518605, 0xeb829f22ddb584d6, 0xee980666fdcdcf3a, 0x68687d092dc622b9, 0xeae660692c517503,  0xa3db59c1a7534a97 ,
         0xb584d6fc514382fb, 0xcdcf3aeb829f22dd, 0xc622b9ee980666fd, 0x51750368687d092d, 0x534a97eae660692c, 0x26b67aa3db59c1a7, 0x94f95bc35aa0aa77,  0x5186058083a01c86 ,
         0x103e37223289410b, 0xa6aaec2ae52c8553, 0x1f77d287bbd46ad5,  0x776bab4b29efeb7,  0x2f8e93197dbf039, 0xe1600093bde121e8, 0xc74340d83a2538fc,  0x826285a59a6afe8f ,
         0x9efeb71f77d287bb, 0xdbf0390776bab4b2, 0xe121e802f8e93197, 0x2538fce1600093bd, 0x6afe8fc74340d83a, 0x89410b826285a59a, 0x2c8553103e372232,  0xd46ad5a6aaec2ae5 ,
         0xbb81978c95f753b2, 0xfaa4b29431927fc9, 0x9ce3d2e3410195f3, 0xfffd0a8b6c84d727, 0x411545e3a1ede010, 0xf109c4ccd7e54458,  0x841d72804b308af,  0x52ee1289743913ae ,
         0x84d7279ce3d2e341, 0xede010fffd0a8b6c, 0xe54458411545e3a1, 0xb308aff109c4ccd7, 0x3913ae0841d72804, 0xf753b252ee128974, 0x927fc9bb81978c95,   0x195f3faa4b29431 ,
         0xc63b22ecb9873b9c, 0xdaa76f3b15a4f15b, 0x5f37eafc2ab7b962, 0x4f2957486c65cd34, 0x270fb88847c00106, 0x10b781fbe17e9dc1, 0x107f4466bd617fcf,   0x421e3630eda4ce3 ,
         0x65cd345f37eafc2a, 0xc001064f2957486c, 0x7e9dc1270fb88847, 0x617fcf10b781fbe1, 0xda4ce3107f4466bd, 0x873b9c0421e3630e, 0xa4f15bc63b22ecb9,  0xb7b962daa76f3b15 ,
         0x94e6b336e687e039, 0x4ecfddb4ac4e749c, 0x49d5312765953c60, 0x9550d9f100520ce7, 0xf9565b674e404eb0, 0x382c51f74ac4be3c, 0x308cbcfbde3d1a8e,  0xf42bb1fddc3bdefa ,
         0x520ce749d5312765, 0x404eb09550d9f100, 0xc4be3cf9565b674e, 0x3d1a8e382c51f74a, 0x3bdefa308cbcfbde, 0x87e039f42bb1fddc, 0x4e749c94e6b336e6,  0x953c604ecfddb4ac ,
         0xc8fbe43f1b0dfce0, 0x96cb2b11b53dac7f, 0xccc1853f593ef2d8,  0x54ddc23aad2d945, 0x8b1f34c308eb6f6c, 0x43592b9bf8e27aaf, 0xb81b28039f109e54,  0x2e01e4c101d21eb9 ,
         0xd2d945ccc1853f59, 0xeb6f6c054ddc23aa, 0xe27aaf8b1f34c308, 0x109e5443592b9bf8, 0xd21eb9b81b28039f,  0xdfce02e01e4c101, 0x3dac7fc8fbe43f1b,  0x3ef2d896cb2b11b5 ,
         0x91d0099e98d97a83, 0x57a083d8a45e2eab, 0xdb3302c97514a86e, 0x5ae82297303752bd, 0x4a67418b202851a3, 0xa8c451812f286790, 0x7da3e7b3bcbd5a68,  0x246ba8adb6ba6218
};

uint64_t  block_512 [64] = {0x4746454443424140ULL, 0x4f4e4d4c4b4a4948ULL, 0x5756555453525150ULL,
                            0x5f5e5d5c5b5a5958ULL, 0x6766656463626160ULL, 0x6f6e6d6c6b6a6968ULL,
                            0x7776757473727170ULL, 0x7f7e7d7c7b7a7978ULL};
uint64_t roundkey256_256_E[4*15] ;
uint64_t roundkey256_256_ED[4*15] ;
uint64_t roundkey512_512_E[8*8*19] ;

uint8_t s_blocks[4][256]  =
{
                       {
                           0xA8, 0x43, 0x5F, 0x06, 0x6B, 0x75, 0x6C, 0x59, 0x71, 0xDF, 0x87, 0x95, 0x17, 0xF0, 0xD8, 0x09,
                           0x6D, 0xF3, 0x1D, 0xCB, 0xC9, 0x4D, 0x2C, 0xAF, 0x79, 0xE0, 0x97, 0xFD, 0x6F, 0x4B, 0x45, 0x39,
                           0x3E, 0xDD, 0xA3, 0x4F, 0xB4, 0xB6, 0x9A, 0x0E, 0x1F, 0xBF, 0x15, 0xE1, 0x49, 0xD2, 0x93, 0xC6,
                           0x92, 0x72, 0x9E, 0x61, 0xD1, 0x63, 0xFA, 0xEE, 0xF4, 0x19, 0xD5, 0xAD, 0x58, 0xA4, 0xBB, 0xA1,
                           0xDC, 0xF2, 0x83, 0x37, 0x42, 0xE4, 0x7A, 0x32, 0x9C, 0xCC, 0xAB, 0x4A, 0x8F, 0x6E, 0x04, 0x27,
                           0x2E, 0xE7, 0xE2, 0x5A, 0x96, 0x16, 0x23, 0x2B, 0xC2, 0x65, 0x66, 0x0F, 0xBC, 0xA9, 0x47, 0x41,
                           0x34, 0x48, 0xFC, 0xB7, 0x6A, 0x88, 0xA5, 0x53, 0x86, 0xF9, 0x5B, 0xDB, 0x38, 0x7B, 0xC3, 0x1E,
                           0x22, 0x33, 0x24, 0x28, 0x36, 0xC7, 0xB2, 0x3B, 0x8E, 0x77, 0xBA, 0xF5, 0x14, 0x9F, 0x08, 0x55,
                           0x9B, 0x4C, 0xFE, 0x60, 0x5C, 0xDA, 0x18, 0x46, 0xCD, 0x7D, 0x21, 0xB0, 0x3F, 0x1B, 0x89, 0xFF,
                           0xEB, 0x84, 0x69, 0x3A, 0x9D, 0xD7, 0xD3, 0x70, 0x67, 0x40, 0xB5, 0xDE, 0x5D, 0x30, 0x91, 0xB1,
                           0x78, 0x11, 0x01, 0xE5, 0x00, 0x68, 0x98, 0xA0, 0xC5, 0x02, 0xA6, 0x74, 0x2D, 0x0B, 0xA2, 0x76,
                           0xB3, 0xBE, 0xCE, 0xBD, 0xAE, 0xE9, 0x8A, 0x31, 0x1C, 0xEC, 0xF1, 0x99, 0x94, 0xAA, 0xF6, 0x26,
                           0x2F, 0xEF, 0xE8, 0x8C, 0x35, 0x03, 0xD4, 0x7F, 0xFB, 0x05, 0xC1, 0x5E, 0x90, 0x20, 0x3D, 0x82,
                           0xF7, 0xEA, 0x0A, 0x0D, 0x7E, 0xF8, 0x50, 0x1A, 0xC4, 0x07, 0x57, 0xB8, 0x3C, 0x62, 0xE3, 0xC8,
                           0xAC, 0x52, 0x64, 0x10, 0xD0, 0xD9, 0x13, 0x0C, 0x12, 0x29, 0x51, 0xB9, 0xCF, 0xD6, 0x73, 0x8D,
                           0x81, 0x54, 0xC0, 0xED, 0x4E, 0x44, 0xA7, 0x2A, 0x85, 0x25, 0xE6, 0xCA, 0x7C, 0x8B, 0x56, 0x80
                       },
                       {
                           0xCE, 0xBB, 0xEB, 0x92, 0xEA, 0xCB, 0x13, 0xC1, 0xE9, 0x3A, 0xD6, 0xB2, 0xD2, 0x90, 0x17, 0xF8,
                           0x42, 0x15, 0x56, 0xB4, 0x65, 0x1C, 0x88, 0x43, 0xC5, 0x5C, 0x36, 0xBA, 0xF5, 0x57, 0x67, 0x8D,
                           0x31, 0xF6, 0x64, 0x58, 0x9E, 0xF4, 0x22, 0xAA, 0x75, 0x0F, 0x02, 0xB1, 0xDF, 0x6D, 0x73, 0x4D,
                           0x7C, 0x26, 0x2E, 0xF7, 0x08, 0x5D, 0x44, 0x3E, 0x9F, 0x14, 0xC8, 0xAE, 0x54, 0x10, 0xD8, 0xBC,
                           0x1A, 0x6B, 0x69, 0xF3, 0xBD, 0x33, 0xAB, 0xFA, 0xD1, 0x9B, 0x68, 0x4E, 0x16, 0x95, 0x91, 0xEE,
                           0x4C, 0x63, 0x8E, 0x5B, 0xCC, 0x3C, 0x19, 0xA1, 0x81, 0x49, 0x7B, 0xD9, 0x6F, 0x37, 0x60, 0xCA,
                           0xE7, 0x2B, 0x48, 0xFD, 0x96, 0x45, 0xFC, 0x41, 0x12, 0x0D, 0x79, 0xE5, 0x89, 0x8C, 0xE3, 0x20,
                           0x30, 0xDC, 0xB7, 0x6C, 0x4A, 0xB5, 0x3F, 0x97, 0xD4, 0x62, 0x2D, 0x06, 0xA4, 0xA5, 0x83, 0x5F,
                           0x2A, 0xDA, 0xC9, 0x00, 0x7E, 0xA2, 0x55, 0xBF, 0x11, 0xD5, 0x9C, 0xCF, 0x0E, 0x0A, 0x3D, 0x51,
                           0x7D, 0x93, 0x1B, 0xFE, 0xC4, 0x47, 0x09, 0x86, 0x0B, 0x8F, 0x9D, 0x6A, 0x07, 0xB9, 0xB0, 0x98,
                           0x18, 0x32, 0x71, 0x4B, 0xEF, 0x3B, 0x70, 0xA0, 0xE4, 0x40, 0xFF, 0xC3, 0xA9, 0xE6, 0x78, 0xF9,
                           0x8B, 0x46, 0x80, 0x1E, 0x38, 0xE1, 0xB8, 0xA8, 0xE0, 0x0C, 0x23, 0x76, 0x1D, 0x25, 0x24, 0x05,
                           0xF1, 0x6E, 0x94, 0x28, 0x9A, 0x84, 0xE8, 0xA3, 0x4F, 0x77, 0xD3, 0x85, 0xE2, 0x52, 0xF2, 0x82,
                           0x50, 0x7A, 0x2F, 0x74, 0x53, 0xB3, 0x61, 0xAF, 0x39, 0x35, 0xDE, 0xCD, 0x1F, 0x99, 0xAC, 0xAD,
                           0x72, 0x2C, 0xDD, 0xD0, 0x87, 0xBE, 0x5E, 0xA6, 0xEC, 0x04, 0xC6, 0x03, 0x34, 0xFB, 0xDB, 0x59,
                           0xB6, 0xC2, 0x01, 0xF0, 0x5A, 0xED, 0xA7, 0x66, 0x21, 0x7F, 0x8A, 0x27, 0xC7, 0xC0, 0x29, 0xD7
                       },
                       {
                           0x93, 0xD9, 0x9A, 0xB5, 0x98, 0x22, 0x45, 0xFC, 0xBA, 0x6A, 0xDF, 0x02, 0x9F, 0xDC, 0x51, 0x59,
                           0x4A, 0x17, 0x2B, 0xC2, 0x94, 0xF4, 0xBB, 0xA3, 0x62, 0xE4, 0x71, 0xD4, 0xCD, 0x70, 0x16, 0xE1,
                           0x49, 0x3C, 0xC0, 0xD8, 0x5C, 0x9B, 0xAD, 0x85, 0x53, 0xA1, 0x7A, 0xC8, 0x2D, 0xE0, 0xD1, 0x72,
                           0xA6, 0x2C, 0xC4, 0xE3, 0x76, 0x78, 0xB7, 0xB4, 0x09, 0x3B, 0x0E, 0x41, 0x4C, 0xDE, 0xB2, 0x90,
                           0x25, 0xA5, 0xD7, 0x03, 0x11, 0x00, 0xC3, 0x2E, 0x92, 0xEF, 0x4E, 0x12, 0x9D, 0x7D, 0xCB, 0x35,
                           0x10, 0xD5, 0x4F, 0x9E, 0x4D, 0xA9, 0x55, 0xC6, 0xD0, 0x7B, 0x18, 0x97, 0xD3, 0x36, 0xE6, 0x48,
                           0x56, 0x81, 0x8F, 0x77, 0xCC, 0x9C, 0xB9, 0xE2, 0xAC, 0xB8, 0x2F, 0x15, 0xA4, 0x7C, 0xDA, 0x38,
                           0x1E, 0x0B, 0x05, 0xD6, 0x14, 0x6E, 0x6C, 0x7E, 0x66, 0xFD, 0xB1, 0xE5, 0x60, 0xAF, 0x5E, 0x33,
                           0x87, 0xC9, 0xF0, 0x5D, 0x6D, 0x3F, 0x88, 0x8D, 0xC7, 0xF7, 0x1D, 0xE9, 0xEC, 0xED, 0x80, 0x29,
                           0x27, 0xCF, 0x99, 0xA8, 0x50, 0x0F, 0x37, 0x24, 0x28, 0x30, 0x95, 0xD2, 0x3E, 0x5B, 0x40, 0x83,
                           0xB3, 0x69, 0x57, 0x1F, 0x07, 0x1C, 0x8A, 0xBC, 0x20, 0xEB, 0xCE, 0x8E, 0xAB, 0xEE, 0x31, 0xA2,
                           0x73, 0xF9, 0xCA, 0x3A, 0x1A, 0xFB, 0x0D, 0xC1, 0xFE, 0xFA, 0xF2, 0x6F, 0xBD, 0x96, 0xDD, 0x43,
                           0x52, 0xB6, 0x08, 0xF3, 0xAE, 0xBE, 0x19, 0x89, 0x32, 0x26, 0xB0, 0xEA, 0x4B, 0x64, 0x84, 0x82,
                           0x6B, 0xF5, 0x79, 0xBF, 0x01, 0x5F, 0x75, 0x63, 0x1B, 0x23, 0x3D, 0x68, 0x2A, 0x65, 0xE8, 0x91,
                           0xF6, 0xFF, 0x13, 0x58, 0xF1, 0x47, 0x0A, 0x7F, 0xC5, 0xA7, 0xE7, 0x61, 0x5A, 0x06, 0x46, 0x44,
                           0x42, 0x04, 0xA0, 0xDB, 0x39, 0x86, 0x54, 0xAA, 0x8C, 0x34, 0x21, 0x8B, 0xF8, 0x0C, 0x74, 0x67
                       },
                       {
                           0x68, 0x8D, 0xCA, 0x4D, 0x73, 0x4B, 0x4E, 0x2A, 0xD4, 0x52, 0x26, 0xB3, 0x54, 0x1E, 0x19, 0x1F,
                           0x22, 0x03, 0x46, 0x3D, 0x2D, 0x4A, 0x53, 0x83, 0x13, 0x8A, 0xB7, 0xD5, 0x25, 0x79, 0xF5, 0xBD,
                           0x58, 0x2F, 0x0D, 0x02, 0xED, 0x51, 0x9E, 0x11, 0xF2, 0x3E, 0x55, 0x5E, 0xD1, 0x16, 0x3C, 0x66,
                           0x70, 0x5D, 0xF3, 0x45, 0x40, 0xCC, 0xE8, 0x94, 0x56, 0x08, 0xCE, 0x1A, 0x3A, 0xD2, 0xE1, 0xDF,
                           0xB5, 0x38, 0x6E, 0x0E, 0xE5, 0xF4, 0xF9, 0x86, 0xE9, 0x4F, 0xD6, 0x85, 0x23, 0xCF, 0x32, 0x99,
                           0x31, 0x14, 0xAE, 0xEE, 0xC8, 0x48, 0xD3, 0x30, 0xA1, 0x92, 0x41, 0xB1, 0x18, 0xC4, 0x2C, 0x71,
                           0x72, 0x44, 0x15, 0xFD, 0x37, 0xBE, 0x5F, 0xAA, 0x9B, 0x88, 0xD8, 0xAB, 0x89, 0x9C, 0xFA, 0x60,
                           0xEA, 0xBC, 0x62, 0x0C, 0x24, 0xA6, 0xA8, 0xEC, 0x67, 0x20, 0xDB, 0x7C, 0x28, 0xDD, 0xAC, 0x5B,
                           0x34, 0x7E, 0x10, 0xF1, 0x7B, 0x8F, 0x63, 0xA0, 0x05, 0x9A, 0x43, 0x77, 0x21, 0xBF, 0x27, 0x09,
                           0xC3, 0x9F, 0xB6, 0xD7, 0x29, 0xC2, 0xEB, 0xC0, 0xA4, 0x8B, 0x8C, 0x1D, 0xFB, 0xFF, 0xC1, 0xB2,
                           0x97, 0x2E, 0xF8, 0x65, 0xF6, 0x75, 0x07, 0x04, 0x49, 0x33, 0xE4, 0xD9, 0xB9, 0xD0, 0x42, 0xC7,
                           0x6C, 0x90, 0x00, 0x8E, 0x6F, 0x50, 0x01, 0xC5, 0xDA, 0x47, 0x3F, 0xCD, 0x69, 0xA2, 0xE2, 0x7A,
                           0xA7, 0xC6, 0x93, 0x0F, 0x0A, 0x06, 0xE6, 0x2B, 0x96, 0xA3, 0x1C, 0xAF, 0x6A, 0x12, 0x84, 0x39,
                           0xE7, 0xB0, 0x82, 0xF7, 0xFE, 0x9D, 0x87, 0x5C, 0x81, 0x35, 0xDE, 0xB4, 0xA5, 0xFC, 0x80, 0xEF,
                           0xCB, 0xBB, 0x6B, 0x76, 0xBA, 0x5A, 0x7D, 0x78, 0x0B, 0x95, 0xE3, 0xAD, 0x74, 0x98, 0x3B, 0x36,
                           0x64, 0x6D, 0xDC, 0xF0, 0x59, 0xA9, 0x4C, 0x17, 0x7F, 0x91, 0xB8, 0xC9, 0x57, 0x1B, 0xE0, 0x61
                       }
};

uint8_t r_s_blocks[4*256];

uint8_t tbuf[16]={0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00 };
uint64_t roundkey128_128_E[11*2];
uint64_t round_key_buf_d[11*2];
uint64_t tmp[2];
uint64_t tmp2[2];
uint8_t block[16]       ={0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F};
uint8_t test_block[64]  ={0x1F, 0x1E, 0x1D, 0x1C, 0x1B, 0x1A, 0x19, 0x18, 0x17, 0x16, 0x15, 0x14, 0x13, 0x12, 0x11, 0x10};
uint8_t test_block_o[64] ;
uint8_t block_256[16*2] ={0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E, 0x2F,
                          0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3A, 0x3B, 0x3C, 0x3D, 0x3E, 0x3F};

uint8_t out_block[16*2];

unsigned long long big_table[8*256];
unsigned long long rbig_table[8*256];


uint8_t block_ctr_128[41]={ 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E, 0x2F,
                        0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3A, 0x3B, 0x3C, 0x3D, 0x3E, 0x3F,
                        0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48};

uint8_t block_ctr_128_e[41]={0xa9, 0x0a, 0x6b, 0x97, 0x80, 0xab, 0xdf, 0xdf, 0xf6, 0x4d, 0x14, 0xf5, 0x43, 0x9e,
                             0x88, 0xf2, 0x66, 0xdc, 0x50, 0xed, 0xd3, 0x41, 0x52, 0x8d, 0xd5, 0xe6, 0x98, 0xe2,
                             0xf0, 0x00, 0xce, 0x21, 0xf8, 0x72, 0xda, 0xf9, 0xfe, 0x18, 0x11, 0x84, 0x4a  };
uint8_t block_ctr_128_o[41];
uint8_t test_iv_128[16]={0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F};
uint8_t test_iv_o[16];

uint8_t test_iv_256[32]={0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E, 0x2F,
                         0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3A, 0x3B, 0x3C, 0x3D, 0x3E, 0x3F};

uint8_t block_ctr_256[81]={0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F,
                           0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x5B, 0x5C, 0x5D, 0x5E, 0x5F,
                           0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F,
                           0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0x7B, 0x7C, 0x7D, 0x7E, 0x7F,
                           0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8A, 0x8B, 0x8C, 0x8D, 0x8E, 0x8F,
                           0x80}; //<= MSB!

uint8_t block_ctr_256_e[81]={0x5e, 0xe1, 0x7c, 0x74, 0x9b, 0x75, 0x1c, 0x91, 0x63, 0x5b, 0xc0, 0xcf, 0xfd, 0x0e, 0xa1, 0x2f,
                             0x40, 0x78, 0x69, 0x5e, 0x9c, 0xc4, 0x60, 0xaa, 0x28, 0x87, 0x1f, 0x8d, 0xd3, 0xd4, 0x79, 0xf5,
                             0x8b, 0xe1, 0xe3, 0x90, 0xcd, 0xf3, 0x4b, 0x93, 0x4c, 0x32, 0x0b, 0xd3, 0x48, 0x55, 0x09, 0x2f,
                             0x1f, 0xbe, 0x52, 0xf8, 0x85, 0x46, 0x54, 0x79, 0x21, 0xec, 0x61, 0xec, 0xab, 0x4e, 0x5e, 0x60,
                             0x86, 0x71, 0x1e, 0xa7, 0x9d, 0xdb, 0xa3, 0x34, 0x73, 0xe9, 0x30, 0x05, 0xee, 0xca, 0xbf, 0x6e,
                             0x80};

uint8_t block_ctr_256_o[81];




uint8_t test_iv_256d[32]={0x3F,0x3E,0x3D,0x3C,0x3B,0x3A,0x39,0x38,0x37,0x36,0x35,0x34,0x33,0x32,0x31,0x30,
                          0x2F,0x2E,0x2D,0x2C,0x2B,0x2A,0x29,0x28,0x27,0x26,0x25,0x24,0x23,0x22,0x21,0x20};

uint8_t test_key_256d[32]={0x1F, 0x1E, 0x1D, 0x1C, 0x1B, 0x1A, 0x19, 0x18, 0x17, 0x16, 0x15, 0x14, 0x13, 0x12, 0x11, 0x10,
                           0x0F, 0x0E, 0x0D, 0x0C, 0x0B, 0x0A, 0x09, 0x08, 0x07, 0x06, 0x05, 0x04, 0x03, 0x02, 0x01, 0x00};

uint8_t block_ctr_256d[81]={0x9F,0x9E,0x9D,0x9C,0x9B,0x9A,0x99,0x98,0x97,0x96,0x95,0x94,0x93,0x92,0x91,0x90,
                            0x8F,0x8E,0x8D,0x8C,0x8B,0x8A,0x89,0x88,0x87,0x86,0x85,0x84,0x83,0x82,0x81,0x80,
                            0x7F,0x7E,0x7D,0x7C,0x7B,0x7A,0x79,0x78,0x77,0x76,0x75,0x74,0x73,0x72,0x71,0x70,
                            0x6F,0x6E,0x6D,0x6C,0x6B,0x6A,0x69,0x68,0x67,0x66,0x65,0x64,0x63,0x62,0x61,0x60,
                            0x5F,0x5E,0x5D,0x5C,0x5B,0x5A,0x59,0x58,0x57,0x56,0x55,0x54,0x53,0x52,0x51,0x50,
                            0x4C};


uint8_t block_256_test[32]={0xf9, 0x6e, 0x3d, 0x57, 0x0e, 0xc9, 0x21, 0x35, 0xae, 0xda, 0xe3, 0x23, 0xdc, 0xbd, 0x2a, 0x8c, 0xa0, 0x39, 0x63, 0xec, 0x20, 0x6a, 0x0d, 0x5a, 0x88, 0x38, 0x5c, 0x24, 0x61, 0x7f, 0xd9, 0x2c};


uint8_t block_512_ctr[97]={ 0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8A, 0x8B, 0x8C, 0x8D, 0x8E, 0x8F,
                            0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D, 0x9E, 0x9F,
                            0xA0, 0xA1, 0xA2, 0xA3, 0xA4, 0xA5, 0xA6, 0xA7, 0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 0xAF,
                            0xB0, 0xB1, 0xB2, 0xB3, 0xB4, 0xB5, 0xB6, 0xB7, 0xB8, 0xB9, 0xBA, 0xBB, 0xBC, 0xBD, 0xBE, 0xBF,
                            0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF,
                            0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD7, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0xDF,
                            0xC0};

uint8_t block_ctr_512_o[97];

uint8_t block_ctr_512_e[97]={ 0x62, 0x46, 0x02, 0x97, 0x67, 0x3d, 0x50, 0x07, 0xc8, 0x8f, 0xd7, 0xf1, 0x42, 0x50, 0xd8, 0x0f,
                              0x10, 0x24, 0x75, 0x11, 0x6f, 0x3b, 0xb1, 0x13, 0x85, 0x8d, 0xeb, 0xbe, 0x8c, 0x50, 0xef, 0xf4,
                              0xe2, 0xa2, 0xbc, 0x11, 0xb6, 0x56, 0xef, 0xc0, 0xbf, 0x9d, 0x46, 0x47, 0xba, 0x94, 0xb5, 0x02,
                              0xf8, 0xaf, 0x46, 0x27, 0x31, 0x3c, 0xa3, 0xaa, 0xea, 0xcf, 0xfc, 0x70, 0x7c, 0xa7, 0x2c, 0xd9,
                              0xa9, 0x5b, 0x1c, 0xce, 0x08, 0xdc, 0x4d, 0xd4, 0xa8, 0xea, 0x07, 0x65, 0x98, 0x61, 0x03, 0xc2,
                              0x1b, 0x7c, 0x0d, 0xb0, 0xfb, 0xb6, 0x02, 0xf2, 0x79, 0xb1, 0xa0, 0x0d, 0x5e, 0x4f, 0xfa, 0x18,
                              0x80};

uint8_t block_512_cfb[97]={ 0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8A, 0x8B, 0x8C, 0x8D, 0x8E, 0x8F,
                            0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D, 0x9E, 0x9F,
                            0xA0, 0xA1, 0xA2, 0xA3, 0xA4, 0xA5, 0xA6, 0xA7, 0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 0xAF,
                            0xB0, 0xB1, 0xB2, 0xB3, 0xB4, 0xB5, 0xB6, 0xB7, 0xB8, 0xB9, 0xBA, 0xBB, 0xBC, 0xBD, 0xBE, 0xBF,
                            0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF,
                            0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD7, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0xDF,
                            0xE0};//<= эти биты отличаются

uint8_t block_512_cfb_e[97]={0xca, 0xa7, 0x61, 0x98, 0x05, 0x99, 0xb3, 0xed, 0x2e, 0x94, 0x5c, 0x41, 0x89, 0x1b, 0xad, 0x95,
                             0xf7, 0x2b, 0x11, 0xc7, 0x3e, 0xd2, 0x65, 0x36, 0xa6, 0x84, 0x74, 0x58, 0xbc, 0x76, 0xc8, 0x27,
                             0x35, 0x71, 0x56, 0xb4, 0xb3, 0xfe, 0x0d, 0xc1, 0x87, 0x7f, 0x5b, 0x9f, 0x17, 0xb8, 0x66, 0xc3,
                             0x7b, 0x21, 0xd8, 0x95, 0x31, 0xdb, 0x48, 0x00, 0x7d, 0x05, 0xde, 0xc9, 0x28, 0xb0, 0x67, 0x66,
                             0xc6, 0x7d, 0x6f, 0x3f, 0x4c, 0x2b, 0x82, 0xd7, 0xa8, 0x36, 0xfa, 0xd1, 0x60, 0x90, 0x5c, 0x1c,
                             0x75, 0x76, 0x24, 0x38, 0x77, 0xdc, 0x3a, 0xde, 0x4a, 0xa0, 0x57, 0x96, 0x6e, 0x00, 0x23, 0xf0,
                             0x69};
uint8_t block_512_cfb_o[97];
uint8_t block_512_cfb_od[97];


uint8_t test_iv_512[64]={   0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F,
                            0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x5B, 0x5C, 0x5D, 0x5E, 0x5F,
                            0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F,
                            0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0x7B, 0x7C, 0x7D, 0x7E, 0x7F };

uint8_t block_cfb_256[81]={0x9F,0x9E,0x9D,0x9C,0x9B,0x9A,0x99,0x98,0x97,0x96,0x95,0x94,0x93,0x92,0x91,0x90,
                           0x8F,0x8E,0x8D,0x8C,0x8B,0x8A,0x89,0x88,0x87,0x86,0x85,0x84,0x83,0x82,0x81,0x80,
                           0x7F,0x7E,0x7D,0x7C,0x7B,0x7A,0x79,0x78,0x77,0x76,0x75,0x74,0x73,0x72,0x71,0x70,
                           0x6F,0x6E,0x6D,0x6C,0x6B,0x6A,0x69,0x68,0x67,0x66,0x65,0x64,0x63,0x62,0x61,0x60,
                           0x5F,0x5E,0x5D,0x5C,0x5B,0x5A,0x59,0x58,0x57,0x56,0x55,0x54,0x53,0x52,0x51,0x50,
                           0x4F};

uint8_t block_cfb_256_e[81]={0x77, 0x58, 0xa9, 0x39, 0xdd, 0x6b, 0xd0, 0x0c, 0xaf, 0x91, 0x53, 0xe5, 0xa5, 0xd5, 0xa6, 0x61,
                             0x29, 0x10, 0x5c, 0xa1, 0xea, 0x54, 0xa9, 0x7c, 0x06, 0xfa, 0x4a, 0x40, 0x96, 0x0a, 0x06, 0x8f,
                             0x61, 0xc3, 0xe4, 0x24, 0xde, 0x95, 0x01, 0x51, 0xac, 0x46, 0x87, 0x9d, 0x84, 0xa3, 0xbc, 0xc2,
                             0x4e, 0xc8, 0xfb, 0x69, 0x00, 0x8d, 0xaf, 0x01, 0x6e, 0xf9, 0x83, 0x2f, 0xfd, 0x3d, 0xb3, 0x9d,
                             0x02, 0x18, 0x5f, 0xdb, 0x78, 0x2d, 0xc2, 0x8e, 0xac, 0x27, 0xb3, 0x51, 0x79, 0xfc, 0xa4, 0x06,
                             0x40};

uint8_t block_cfb_256_o[81];
uint8_t block_cfb_256_od[81];

uint8_t block_cfb_128[48]={ 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E, 0x2F,
                            0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3A, 0x3B, 0x3C, 0x3D, 0x3E, 0x3F,
                            0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F};
uint8_t block_cfb_128_e[48]={0xa1, 0x9e, 0x3e, 0x5e, 0x53, 0xbe, 0x8a, 0x07, 0xc9, 0xe0, 0xc0, 0x12, 0x98, 0xff,
                             0x83, 0x29, 0x1f, 0x8e, 0xe6, 0x21, 0x21, 0x10, 0xbe, 0x3f, 0xa5, 0xc7, 0x2c, 0x88,
                             0xa0, 0x82, 0x52, 0x0b, 0x26, 0x55, 0x70, 0xfe, 0x28, 0x68, 0x07, 0x19, 0xd9, 0xb4,
                             0x46, 0x5e, 0x16, 0x9b, 0xc3, 0x7a};

uint8_t block_cfb_128_o[48];
uint8_t block_cfb_128_od[48];
#define BUF_SIZE 4096
int crypt_file(const char *in_path, const char *out_path){
    FILE *f_in, *f_out;
    uint8_t in_buf[BUF_SIZE];
    uint8_t out_buf[BUF_SIZE];
    size_t rb,wb,bb;
    uint16_t    k;

    f_in=fopen(in_path,"rb");
    if(f_in == NULL){
        printf("In file open error \r\n");
        return -1;
    }

    f_out=fopen(out_path, "wb");
    if(f_out == NULL){
        fclose(f_in);
        printf("Out file open error \r\n");
        return -1;
    }

    do{
        memset(in_buf,0x00,BUF_SIZE);
        rb=fread(in_buf,1,BUF_SIZE,f_in);
        if(rb){
            bb=ceil(((double)rb)/32);
            k=0;
            while(bb){
                kalina_256_256_encrypt_block(&out_buf[k],&in_buf[k],roundkey256_256_E,big_table);
                k+=32;
                bb--;
            }
            wb=fwrite(out_buf,1,rb,f_out);
            if(wb==0){
                printf("Write error\r\n");
                fclose(f_out);
                fclose(f_in);
                return -1;
            }
        }
    }while(rb);

    fclose(f_out);
    fclose(f_in);
    return 0;
}


int main(int argc, char *argv[])
{
//
    int c;
    char path_in[256];
    char path_out[256];

    memset(path_in,0x00,256);
    memset(path_out,0x00,256);

    kalina_make_awesome_table(big_table, s_blocks);
    kalina_256_256_generate_round_keys(roundkey256_256_E,   key_test_0, big_table);
    while((c = getopt (argc, argv, "i:o:")) != -1){
        switch(c){
            case 'i':
                strcpy(path_in,optarg);
                break;
            case 'o':
                strcpy(path_out,optarg);
                break;

            default:
                abort();
                break;
        }
    }

    if((strlen(path_in) == 0) || (strlen(path_out) == 0)){
        printf("Bad arguments! -i path to in file -o path to out file\r\n");
        return -1;
    }



    return crypt_file(path_in, path_out);
}
